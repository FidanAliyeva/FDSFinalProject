{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['application_test.csv', 'HomeCredit_columns_description.csv', 'POS_CASH_balance.csv', 'credit_card_balance.csv', 'installments_payments.csv', 'application_train.csv', 'bureau.csv', 'previous_application.csv', 'bureau_balance.csv', 'sample_submission.csv']\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# numpy and pandas for data manipulation\n",
    "import numpy as np\n",
    "import pandas as pd \n",
    "import sklearn\n",
    "\n",
    "# sklearn preprocessing for dealing with categorical variables\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# File system manangement\n",
    "import os\n",
    "\n",
    "# Suppress warnings \n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# matplotlib and seaborn for plotting\n",
    "import matplotlib.pyplot as plt\n",
    "#import seaborn as sns\n",
    "\n",
    "\n",
    "\n",
    "print(os.listdir(\"/Users/fidan/Desktop/fds/home-credit-default-risk\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#TRAINING DATA\n",
    "app_train = pd.read_csv('/Users/fidan/Desktop/fds/home-credit-default-risk/application_train.csv')\n",
    "#print('Training data shape: ', app_train.shape)   \n",
    "app_train.head()       #output:  Training data shape:  (307511, 122)\n",
    "                       #307511 observations (each one a separate loan) and 122 features (variables) including the TARGET (the label we want to predict).\n",
    "\n",
    "\n",
    "\n",
    "# TESTING DATA FEATURES\n",
    "app_test = pd.read_csv('/Users/fidan/Desktop/fds/home-credit-default-risk/application_test.csv')\n",
    "#print('Testing data shape: ', app_test.shape)\n",
    "app_test.head()       #output: Testing data shape:  (48744, 121)\n",
    "\n",
    "app_train['TARGET'].value_counts()   #output: 0   282686\n",
    "                                            # 1    24825       Name:TARGET, dtype:int64\n",
    "\n",
    "app_train['TARGET'].astype(int).plot.hist();\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your selected dataframe has 55 columns.\n",
      "There are 0 columns that have missing values.\n",
      "   SK_ID_CURR  TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR  \\\n",
      "0      100002       1         Cash loans           M            N   \n",
      "\n",
      "  FLAG_OWN_REALTY  CNT_CHILDREN  AMT_INCOME_TOTAL  AMT_CREDIT  \\\n",
      "0               Y             0          202500.0    406597.5   \n",
      "\n",
      "  NAME_INCOME_TYPE  ... FLAG_DOCUMENT_12 FLAG_DOCUMENT_13 FLAG_DOCUMENT_14  \\\n",
      "0          Working  ...                0                0                0   \n",
      "\n",
      "   FLAG_DOCUMENT_15  FLAG_DOCUMENT_16  FLAG_DOCUMENT_17  FLAG_DOCUMENT_18  \\\n",
      "0                 0                 0                 0                 0   \n",
      "\n",
      "   FLAG_DOCUMENT_19  FLAG_DOCUMENT_20  FLAG_DOCUMENT_21  \n",
      "0                 0                 0                 0  \n",
      "\n",
      "[1 rows x 55 columns]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#MISSING VALUE\n",
    "\n",
    "# Function to calculate missing values by column# Funct \n",
    "def missing_values_table(df):\n",
    "        # Total missing values\n",
    "        mis_val = df.isnull().sum()\n",
    "        \n",
    "        # Percentage of missing values\n",
    "        mis_val_percent = 100 * df.isnull().sum() / len(df)\n",
    "        \n",
    "        # Make a table with the results\n",
    "        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n",
    "        \n",
    "        # Rename the columns\n",
    "        mis_val_table_ren_columns =mis_val_table.rename(\n",
    "            columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n",
    "        \n",
    "        # Sort the table by percentage of missing descending\n",
    "        mis_val_table_ren_columns = mis_val_table_ren_columns[\n",
    "            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n",
    "        '% of Total Values', ascending=False).round(1)\n",
    "        \n",
    "        # Print some summary information\n",
    "        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n",
    "            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n",
    "              \" columns that have missing values.\")\n",
    "        \n",
    "        # Return the dataframe with missing information\n",
    "        return mis_val_table_ren_columns\n",
    "\n",
    "\n",
    "# Missing values statistics\n",
    "missing_values = missing_values_table(app_train)\n",
    "missing_values.head(20)  \n",
    "\n",
    "#output: Your selected dataframe has 122 columns.\n",
    "#There are 67 columns that have missing values.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "app_train=app_train.dropna(axis=\"columns\");\n",
    "print(app_train.head(1));\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Number of each type of column\n",
    "#app_train.dtypes.value_counts()\n",
    "\n",
    "\n",
    "# Number of unique classes in each object column\n",
    "#app_train.select_dtypes('object').apply(pd.Series.nunique, axis = 0)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your selected dataframe has 55 columns.\n",
      "There are 0 columns that have missing values.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing Values</th>\n",
       "      <th>% of Total Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Missing Values, % of Total Values]\n",
       "Index: []"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_values = missing_values_table(app_train)\n",
    "missing_values.head(20) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 columns were label encoded.\n"
     ]
    }
   ],
   "source": [
    "le = LabelEncoder()\n",
    "le_count = 0\n",
    "\n",
    "# Iterate through the columns\n",
    "for col in app_train:\n",
    "    if app_train[col].dtype == 'object':\n",
    "        # If 2 or fewer unique categories\n",
    "        if len(list(app_train[col].unique())) <= 2:\n",
    "            # Train on the training data\n",
    "            le.fit(app_train[col])\n",
    "            # Transform both training and testing data\n",
    "            app_train[col] = le.transform(app_train[col])\n",
    "            app_test[col] = le.transform(app_test[col])\n",
    "            \n",
    "            # Keep track of how many columns were label encoded\n",
    "            le_count += 1\n",
    "            \n",
    "print('%d columns were label encoded.' % le_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Features shape:  (307511, 243)\n",
      "Testing Features shape:  (48744, 239)\n"
     ]
    }
   ],
   "source": [
    "# one-hot encoding of categorical variables\n",
    "app_train = pd.get_dummies(app_train)\n",
    "app_test = pd.get_dummies(app_test)\n",
    "\n",
    "print('Training Features shape: ', app_train.shape)\n",
    "print('Testing Features shape: ', app_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Features shape:  (307511, 240)\n",
      "Testing Features shape:  (48744, 239)\n"
     ]
    }
   ],
   "source": [
    "train_labels = app_train['TARGET']\n",
    "\n",
    "# Align the training and testing data, keep only columns present in both dataframes\n",
    "app_train, app_test = app_train.align(app_test, join = 'inner', axis = 1)\n",
    "\n",
    "# Add the target back in\n",
    "app_train['TARGET'] = train_labels\n",
    "\n",
    "print('Training Features shape: ', app_train.shape)\n",
    "print('Testing Features shape: ', app_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
